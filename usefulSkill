/////////////////////////////////////////////////////////////////////////////////////////////
//unordered_map<string, Data*>

//#include <unordered_map>
//#include <string>
//
//struct Data {
//	int num;
//	int data;
//
//	void getData(int n) {
//		this->data = n;
//	}
//};
////map의 value로 단순한 값을 받기 보다 포인터 형식으로 하는 것이 훨씬 효과적
////struct로 데이터 형태를 잡아준다면 효율적으로 사용할 수도 있다.
//std::unordered_map<std::string, Data*> dataDB;
//
//void init() {
//	dataDB.clear();
//}
//
////
//void func1(char mName[]) {
//	Data *p = dataDB[mName]; // O(1);
//	if (p == nullptr) {
//		p->getData(1);
//		dataDB[mName] = p;
//	}
//
//}

/////////////////////////////////////////////////////////////////////////////////////////////
//unordered_multimap
//#include <unordered_map>
//
//struct Data {
//	int data;
//};
//
//std::unordered_multimap<int, Data*> dataDB;
//
//void init() {
//	dataDB.clear();
//}
//
//void func1(int v) {
//	Data* p1;
//	dataDB.insert({ v, p1 });
//	auto r = dataDB.equal_range(v); // O(1);
//
//	for (auto v = r.first; v != r.second; v++) {
//		Data* p = v->second;
//	}
//}
//
/////////////////////////////////////////////////////////////////////////////
////hash Function
//#define HASHMOD 0x8000 // be 2^n if possible
//
//int calcHashValue(char s[]) {
//	int ret = 0;
//	for (int idx = 0; s[idx] != '\0'; ++idx) {
//		ret = (ret * 7 + s[idx]) % HASHMOD;
//	}
//	return ret;
//}
//
//int calcHashValue(int v) {
//	return v % HASHMOD;
//}

////////////////////////////////////////////////////////////////////////////////
////PQ example
//#include <queue>
//#include <vector>
//
//struct Data {
//	int data;
//};
//
//struct comp {
//	bool operator()(Data* a, Data* b) {
//		return a->data > b->data;
//	}
//};
//
//std::priority_queue<Data*, std::vector<Data*>, comp> PQ;
//
//void init() {
//	PQ = {};
//}
//
//void func1() {
//	while (!PQ.empty()) {
//		Data* p = PQ.top();
//		PQ.pop();
//		PQ.push(p);
//	}
//}

//////////////////////////////////////////////////////////////////////////////
//Modification in PQ
//#include <queue>
//
//struct Data {
//	int pri;
//	int checked;
//};
//std::priority_queue<std::pair<int, Data*>> PQ;
//
//Data* db[123456789];
//void modify(int mID, int c) {
//	Data* p = db[mID];
//	p->pri += c;
//	PQ.push({ p->pri, p });
//}
//
//int checkCnt = 0;
//void find() {
//	++checkCnt;
//	while (!PQ.empty()) {
//		int pri = PQ.top().first;
//		Data* p = PQ.top().second;
//		PQ.pop();
//		if (pri != p->pri && p->checked == checkCnt)
//			continue;
//		p->checked = checkCnt;
//	}
//}

////////////////////////////////////////
////set Example set<Data*, comp>
//#include <set>
//
//struct Data {
//	int pri;
//	int data;
//};
//
//struct comp {
//	bool operator()(Data* const &a, Data* const &b) {
//		return a->pri > b->pri;
//	}
//};
//
//std::set<Data*, comp> SET;
//
//void init() {
//	SET.clear();
//}
//
//void func1() {
//	for (auto it = SET.begin(); it != SET.end();) {
//		Data* p = *it;
//		SET.erase(it++);
//	}
//}

///////////////////////////////////////////////////////
//Modification in SET

//#include <set>
//struct Data {
//	int pri;
//	int data;
//};
//
//struct comp {
//	bool operator()(Data* const &a, Data* const &b) {
//		return a->pri > b->pri;
//	}
//};
//
//std::set<Data*, comp> SET;
//Data* iteratordb[123456789];
//Data* db[123456789];
//void modify(int mID, int c) {
//	auto it = iteratordb[mID];
//	Data* p = db[mID];
//	p += c;
//	SET.erase(it);
//	auto r = SET.insert(p);
//	iteratordb[mID] = *r.first;
//}
//
//void find() {
//	while (SET.size() > 0) {
//		auto it = SET.begin();
//		SET.erase(it);
//	}
//}

///////////////////////////////////////////////
//Heap POP
int heap[123456789];
int data[123456789];
int heapsize;
int pop() {
	int ret = heap[0];
	heap[0] = heap[--heapsize];
	int cur = 0;
	while (cur * 2 + 1 < heapsize)
	{
		int child = (cur * 2 + 2 == heapsize) ||
			(data[heap[cur * 2 + 2]] < data[heap[cur * 2 + 1]]) ?
			cur * 2 + 1 : cur * 2 + 2;
		if (data[heap[child]] < data[heap[cur]]) break;
		swap(heap[cur], heap[child]);
		cur = child;
	}
	return ret;
}

void shiftup(int uID) {
	int cur = uID;
	while (cur > 0 && data[heap[(cur - 1) / 2]] < data[heap[cur]]) {
		swap(heap[cur], heap[(cur - 1) / 2]);
		data[heap[cur]].uID = cur;
		data[heap[(cur - 1) / 2]].uID = (cur - 1) / 2;
		cur = (cur - 1) / 2;
	}
}

void shiftdown(int nID) {
	int cur = nID;
	while (cur * 2 + 1 < heapsize) {
		int child = (cur * 2 + 2 == heapsize) ||
			(data[heap[cur * 2 + 2]] < data[heap[cur * 2 + 1]]) ?
			cur * 2 + 1 : cur * 2 + 2;
		if (data[heap[child]] < data[heap[cur]]) break;
		swap(heap[cur], heap[child]);
		data[heap[cur]] = cur;
		data[heap[child]] = child;
		cur = child;
	}
}
